/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SMRPlugin.java
 *
 * Created on 02-10-2009, 10:38:46
 */
package marg.gui.plugin;

import marg.gui.plugin.smr.*;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import marg.handlers.XMLClientHandler;
import marg.model.ModuleVariable;
import marg.model.plugin.VarDataPlugin;

/**
 *
 * @author Daniel
 */
public class SMRPlugin extends javax.swing.JPanel implements ModulePlugin, PropertyChangeListener {

    public static final int ENCODER_UPDATE_DELAY = 1000;  // ms
    private static final String LINESENSOR_VARNAME = "rhd.linesensor";
    private static final String IRSENSOR_VARNAME = "rhd.irsensor";
    private static final String ENCODER_LEFT_VARNAME = "rhd.encl";
    private static final String ENCODER_RIGHT_VARNAME = "rhd.encr";
    private static final int LINESENSOR_ROOF = 128;
    private static final int IRSENSOR_ROOF = 200;
    private XMLClientHandler handler;
    private LineGraph irGraph;
    private LineGraph lineGraph;
    private WheelControl leftWheel;
    private WheelControl rightWheel;

    /** Creates new form SMRPlugin */
    public SMRPlugin() {
        initComponents();
        irGraph = new LineGraph();
        lineGraph = new LineGraph();
        jPanelIRGraph.add(irGraph, BorderLayout.CENTER);
        jPanelLineGraph.add(lineGraph, BorderLayout.CENTER);
        leftWheel = new WheelControl(this, WheelControl.Wheel.LEFT);
        rightWheel = new WheelControl(this, WheelControl.Wheel.RIGHT);
        jPanelLeftWheel.add(leftWheel, BorderLayout.CENTER);
        jPanelRightWheel.add(rightWheel, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelLineGraph = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanelIRGraph = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanelLeftWheel = new javax.swing.JPanel();
        jPanelRightWheel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(200, 221, 242));

        jPanel1.setBackground(new java.awt.Color(233, 233, 237));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanelLineGraph.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Line Sensor");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(174, Short.MAX_VALUE))
            .addComponent(jPanelLineGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanelLineGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(233, 233, 237));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanelIRGraph.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("IR Sensor");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(158, Short.MAX_VALUE))
            .addComponent(jPanelIRGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanelIRGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(233, 233, 237));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanelLeftWheel.setBackground(new java.awt.Color(255, 255, 255));
        jPanelLeftWheel.setLayout(new java.awt.BorderLayout());

        jPanelRightWheel.setBackground(new java.awt.Color(255, 255, 255));
        jPanelRightWheel.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Left Wheel");

        jLabel4.setText("    Right Wheel");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jPanelLeftWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelRightWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
                    .addComponent(jLabel4))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelRightWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jPanelLeftWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public String getPluginName() {
        return "SMR";
    }

    public void setXMLClientHandler(XMLClientHandler handler) {
        this.handler = handler;
    }

    public void doUpdate() {
        //
    }

    public void startPlugin() {
        handler.addPropertyChangeListener(VarDataPlugin.SUBSCRIBE_VARDATA, this);
        //TODO: Push sensor data once each second.. Disabled for now
        handler.sendCmd("push cmd=\"var rhd.linesensor\"");
        handler.sendCmd("push cmd=\"var rhd.irsensor\"");
        handler.sendCmd("push t=\""+ ENCODER_UPDATE_DELAY/1000 +"\" cmd=\"var rhd.encr\"");
        handler.sendCmd("push t=\""+ ENCODER_UPDATE_DELAY/1000 +"\" cmd=\"var rhd.encl\"");
    }

    public void stopPlugin() {
        leftWheel.stopUpdateThread();
        rightWheel.stopUpdateThread();
    }

    public JPanel getJPanel() {
        return this;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(VarDataPlugin.SUBSCRIBE_VARDATA)) {
            ModuleVariable modVar = (ModuleVariable) evt.getNewValue();
            parseSensorVariables(modVar);
            parseWheelEncoderVariables(modVar);
            parseSpeedVariables(modVar);
        }
    }

    public int[] getArrayFromSensorString(String value) {
        String[] sValues = value.split(" ");
        int[] data = new int[sValues.length - 1]; //-1 since we don't include the first 1 in Line/IRSensor
        for (int i = 1; i < sValues.length; i++) {
            try {
                int number = Integer.parseInt(sValues[i]);
                data[i-1] = number;
            } catch (NumberFormatException ex) {
                System.err.println("Failed to parse " + sValues[i]);
            }
        }
        return data;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelIRGraph;
    private javax.swing.JPanel jPanelLeftWheel;
    private javax.swing.JPanel jPanelLineGraph;
    private javax.swing.JPanel jPanelRightWheel;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.add(new SMRPlugin());
        f.setSize(400, 400);
        f.setLocation(200, 200);
        f.setVisible(true);
    }

    private void parseSensorVariables(ModuleVariable modVar) {
        if (modVar.getVarName().equals(LINESENSOR_VARNAME)) {
            int[] data = getArrayFromSensorString(modVar.getValue());
            lineGraph.setData(data, LINESENSOR_ROOF);
        } else if (modVar.getVarName().equals(IRSENSOR_VARNAME)) {
            int[] data = getArrayFromSensorString(modVar.getValue());
            irGraph.setData(data, IRSENSOR_ROOF);
        }
    }

    private void parseWheelEncoderVariables(ModuleVariable modVar) {
        if (modVar.getVarName().equals(ENCODER_LEFT_VARNAME)) {
            leftWheel.newEncoderValue(getValue(modVar));
        } else if (modVar.getVarName().equals(ENCODER_RIGHT_VARNAME)) {
            rightWheel.newEncoderValue(getValue(modVar));
        }
    }

    private int getValue(ModuleVariable modVar) {
        String[] valueS = modVar.getValue().split(" ");
        return Integer.parseInt(valueS[1]);
    }

    public XMLClientHandler getXMLClientHandler() {
        return handler;
    }

    private void parseSpeedVariables(ModuleVariable modVar) {
        if (modVar.getVarName().equals("rhd.speedr")) {
            int speed = getValue(modVar);
            rightWheel.setSpeedLabel(speed);
        } else if (modVar.getVarName().equals("rhd.speedl")) {
            int speed = getValue(modVar);
            leftWheel.setSpeedLabel(speed);
        }
    }
}
