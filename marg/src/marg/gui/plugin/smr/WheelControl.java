/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WheelControl.java
 *
 * Created on 02-10-2009, 15:14:19
 */
package marg.gui.plugin.smr;

import java.awt.BorderLayout;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import marg.gui.plugin.SMRPlugin;

/**
 *
 * @author Daniel
 */
public class WheelControl extends javax.swing.JPanel implements ChangeListener, Runnable {

    public enum Wheel {
        RIGHT,
        LEFT
    };

    private static final double ENCODER_PER_ANGLE = 2000 / 360.0;
    private SMRPlugin parent;
    private RobotWheel robWheel;
    private Wheel wheel;
    private boolean threadRunning = false;
    private int lastEncoderValue = Integer.MAX_VALUE;
    private int lastSentSpeed = Integer.MAX_VALUE;
    private int encoderSpeed = 0;

    /** Creates new form WheelControl */
    public WheelControl(SMRPlugin parent, Wheel wheel) {
        initComponents();
        this.wheel = wheel;
        this.parent = parent;
        startUpdateThread();
        robWheel = new RobotWheel();
        jPanelWheel.add(robWheel, BorderLayout.CENTER);
        jSlider1.addChangeListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelWheel = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabelEncoder = new javax.swing.JLabel();
        jLabelSpeed = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanelWheel.setBackground(new java.awt.Color(255, 255, 255));
        jPanelWheel.setLayout(new java.awt.BorderLayout());

        jSlider1.setBackground(new java.awt.Color(255, 255, 255));
        jSlider1.setMajorTickSpacing(50);
        jSlider1.setMinimum(-100);
        jSlider1.setMinorTickSpacing(10);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(0);

        jLabelEncoder.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelEncoder.setText("Encr");

        jLabelSpeed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelSpeed.setText("Speed");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabelEncoder, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                    .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanelWheel, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelEncoder)
                    .addComponent(jLabelSpeed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelEncoder;
    private javax.swing.JLabel jLabelSpeed;
    private javax.swing.JPanel jPanelWheel;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) {
        JFrame f = new JFrame();
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        WheelControl wheelControl = new WheelControl(null, Wheel.LEFT);
        f.add(wheelControl);
        f.setSize(200, 250);
        f.setLocation(200, 200);
        f.setVisible(true);
        wheelControl.newEncoderValue(0);
        wheelControl.newEncoderValue(-2000);
    }

    private void startUpdateThread() {
        Thread t = new Thread(this);
        threadRunning = true;
        t.start();
    }

    public void newEncoderValue(int newValue) {
        if (lastEncoderValue == Integer.MAX_VALUE) {
            lastEncoderValue = newValue;
        } else {
            //TODO: Encoder Overflow, enc tallet skifter 7FFF + 1 = -7FFE (når den kører 1 tick fremad og før stod på 7FFF)
            int encDiff = newValue - lastEncoderValue;
            //System.out.println("Encoder Diff: " + encDiff);
            encoderSpeed = encDiff;
            lastEncoderValue = newValue;
        }
        jLabelEncoder.setText("Encr: " + newValue);
    }

    public void run() {
        while (threadRunning) {
            double changeAngle = encoderSpeed / ENCODER_PER_ANGLE;
            //System.out.println("Change Angle: " + changeAngle);
            if (changeAngle < 0 || changeAngle > 0) {
                robWheel.moveWheel(changeAngle / 20);
            }
            try {
                int delay = SMRPlugin.ENCODER_UPDATE_DELAY / 20;
                Thread.sleep(delay);
            } catch (InterruptedException ex) {
                Logger.getLogger(WheelControl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void setSpeedLabel(int speed) {
        jLabelSpeed.setText("Speed: "+ speed +" cm/sec");
    }

    public void stateChanged(ChangeEvent e) {
        JSlider source = (JSlider) e.getSource();
        int sliderValue = source.getValue();
        if (!source.getValueIsAdjusting() && sliderValue != lastSentSpeed) {
            if (parent != null) {
                String speedVarName = "rhd.speedr";
                if (wheel == Wheel.LEFT)
                    speedVarName = "rhd.speedl";
                parent.getXMLClientHandler().sendCmd("var "+ speedVarName +"[1]=\""+ sliderValue +"\"");
                lastSentSpeed = sliderValue;
            }
        }
    }

    public void stopUpdateThread() {
        threadRunning = false;
    }
}
