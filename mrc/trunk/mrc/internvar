void init_internvar(internvartype * p)
{
   p->pdrivendist = putinternvar("drivendist",1);
   p->pcmdtime = putinternvar("cmdtime",1);
   p->pirdist0 = putinternvar("irdistleft",1);
   p->pirdist1 = putinternvar("irdistfrontleft",1);
   p->pirdist2 = putinternvar("irdistfrontmiddle",1);
   p->pirdist3 = putinternvar("irdistfrontright",1);
   p->pirdist4 = putinternvar("irdistright",1);
   p->pirl = putinternvar("irl",1);
   p->pirfl = putinternvar("irfl",1);
   p->pirfm = putinternvar("irfm",1);
   p->pirfr = putinternvar("irfr",1);
   p->pirr = putinternvar("irr",1);
   p->podox = putinternvar("odox",1);
   p->podoy = putinternvar("odoy",1);
   p->podoth = putinternvar("odoth",1);
   p->pododist = putinternvar("ododist",1);
   p->pododistleft = putinternvar("ododistleft",1);
   p->pododistright = putinternvar("ododistright",1);
   p->podovelocity = putinternvar("odovelocity",1);
   p->pododencr = putinternvar("ododencr",1);
   p->pododencl = putinternvar("ododencl",1);
   p->podosteeringangle = putinternvar("odosteeringangle",1);
   p->pblacklinefound = putinternvar("blacklinefound",1);
   p->pcrossingblack = putinternvar("crossingblackline",1);
   p->pcrossingblackr = putinternvar("crossingblackliner",1);
   p->pcrossingwhite = putinternvar("crossingwhiteline",1);
   p->prdr = putinternvar("rowdetectedright",1);
   p->prdl = putinternvar("rowdetectedleft",1);
   p->pbatteryvoltage = putinternvar("batteryvoltage",1);
   p->psupplyvoltage = putinternvar("supplyvoltage",1);
   p->pintpstatereturn = putinternvar("statereturn",1);
   p->line0 = putinternvar("line0",1);
   p->line1 = putinternvar("line1",1);
   p->line2 = putinternvar("line2",1);
   p->line3 = putinternvar("line3",1);
   p->line4 = putinternvar("line4",1);
   p->line5 = putinternvar("line5",1);
   p->line6 = putinternvar("line6",1);
   p->line7 = putinternvar("line7",1);
   p->plineraw0 = putinternvar("lineraw0",1);
   p->plineraw1 = putinternvar("lineraw1",1);
   p->plineraw2 = putinternvar("lineraw2",1);
   p->plineraw3 = putinternvar("lineraw3",1);
   p->plineraw4 = putinternvar("lineraw4",1);
   p->plineraw5 = putinternvar("lineraw5",1);
   p->plineraw6 = putinternvar("lineraw6",1);
   p->plineraw7 = putinternvar("lineraw7",1);
   p->plinepos = putinternvar("linepos",1);
   p->pnoline_b = putinternvar("nolineb",1);
   p->pnolinecamr = putinternvar("nolinecamr",1);
   p->pnolinecaml = putinternvar("nolinecaml",1);
   p->pedgedetect = putinternvar("edgedetect",1);
   p->pedgex = putinternvar("edgex",1);
   p->pedgey = putinternvar("edgey",1);
   p->pedgeth = putinternvar("edgeth",1);
   p->pguidemarkok = putinternvar("guidemarkok",1);
   p->pgmkx = putinternvar("gmkx",1);
   p->pgmky = putinternvar("gmky",1);
   p->pgmkz = putinternvar("gmkz",1);
   p->pgmkomega = putinternvar("gmkomega",1);
   p->pgmkphi = putinternvar("gmkphi",1);
   p->pgmkkappa = putinternvar("gmkkappa",1);
   p->pwallestiswall = putinternvar("wallnow",1);
   p->pwallestholes = putinternvar("wallholes",1);
   p->pdlog0 = putinternvar("log0",1);
   p->pdlog1 = putinternvar("log1",1);
   p->pdlog2 = putinternvar("log2",1);
   p->pdlog3 = putinternvar("log3",1);
   p->pwheretogo = putinternvar("wheretogo",1);
   p->pmotorpwml = putinternvar("motorpwml",1);
   p->pmotorpwmr = putinternvar("motorpwmr",1);
   p->pmotorcmdl = putinternvar("motorcmdl",1);
   p->pmotorcmdr = putinternvar("motorcmdr",1);
   p->pmotorstatusl = putinternvar("motorstatusl",1);
   p->pmotorstatusr = putinternvar("motorstatusr",1);
   p->pblocked = putinternvar("blocked",1);
   p->pmotionstatus = putinternvar("motionstatus",1);
   p->ptargetx = putinternvar("targetx",1);
   p->ptargety = putinternvar("targety",1);
   p->ptargetth = putinternvar("targetth",1);
   p->ptargetdist = putinternvar("targetdist",1);
   p->ptime = putinternvar("time",1);
   p->pgyro1 = putinternvar("gyro1",1);
   p->pgyro2 = putinternvar("gyro2",1);
   p->pgyrotemp1 = putinternvar("gyrotemp1",1);
   p->pgyrotemp2 = putinternvar("gyrotemp2",1);
   p->preadflags = putinternvar("readflags",1);
   p->phakosteeringangle = putinternvar("hakosteeringangle",1);
   p->phakosteeringangleref = putinternvar("hakosteeringangleref",1);
   p->phakospeedref = putinternvar("hakospeedref",1);
   p->phakocvtpulses = putinternvar("hakocvtpulses",1);
   p->phakoenginespeed = putinternvar("hakoenginespeed",1);
   p->phakoenginespeedref = putinternvar("hakoenginespeedref",1);
   p->phakonavigationmode = putinternvar("hakonavigationmode",1);
   p->phakonavigationmoderef = putinternvar("hakonavigationmoderef",1);
   p->phakostate0 = putinternvar("hakostate0",1);
   p->phakostate1 = putinternvar("hakostate1",1);
   p->phakostate2 = putinternvar("hakostate2",1);
   p->phakostate3 = putinternvar("hakostate3",1);
   p->phakodirectionbyte = putinternvar("hakodirectionbyte",1);
   p->phakoliftpos = putinternvar("hakoliftinggearpos",1);
   p->phakotakeoffspeed = putinternvar("hakopowertakeoffspeed",1);
   p->pimuroll = putinternvar("imuroll",1);
   p->pimupitch = putinternvar("imupitch",1);
   p->pimuyaw = putinternvar("imuyaw",1);
   p->pimuaccx = putinternvar("imuaccx",1);
   p->pimuaccy = putinternvar("imuaccy",1);
   p->pimuaccz = putinternvar("imuaccz",1);
   p->pimutemp = putinternvar("imutemp",1);
   p->pimutime = putinternvar("imutime",1);
   p->pxkalman = putinternvar("xkalman",1);
   p->pykalman = putinternvar("ykalman",1);
   p->pthkalman = putinternvar("thkalman",1);
   p->pkalmanstatus = putinternvar("kalmanstatus",1);
   p->pgpseasting = putinternvar("gpseasting",1);
   p->pgpsnorthing = putinternvar("gpsnorthing",1);
   p->pgpsquality = putinternvar("gpsquality",1);
   p->pgpssatellites = putinternvar("gpssatellites",1);
   p->pgpsdop = putinternvar("gpsdop",1);
   p->vis0 = putinternvar("vis0",1);
   p->vis1 = putinternvar("vis1",1);
   p->vis2 = putinternvar("vis2",1);
   p->vis3 = putinternvar("vis3",1);
   p->vis4 = putinternvar("vis4",1);
   p->vis5 = putinternvar("vis5",1);
   p->vis6 = putinternvar("vis6",1);
   p->vis7 = putinternvar("vis7",1);
   p->vis8 = putinternvar("vis8",1);
   p->vis9 = putinternvar("vis9",1);
    p->l0=putinternvar("l0",1);
      p->l1=putinternvar("l1",1);
      p->l2=putinternvar("l2",1);
      p->l3=putinternvar("l3",1);
      p->l4=putinternvar("l4",1);
      p->l5=putinternvar("l5",1);
      p->l6=putinternvar("l6",1);
      p->l7=putinternvar("l7",1);
      p->l8=putinternvar("l8",1);
      p->l9=putinternvar("l9",1);
      p->pclock=putinternvar("clock",1);
      p->ptick=putinternvar("tick",1);
      
}


void update_internvar(internvartype * p, sm_type * sm)
{
   *p->pdrivendist = statedist(sm);
   *p->pcmdtime = sm->time * motcon.ts;
   *p->pirdist0 = ir_dist[0];
   *p->pirdist1 = ir_dist[1];
   *p->pirdist2 = ir_dist[2];
   *p->pirdist3 = ir_dist[3];
   *p->pirdist4 = ir_dist[4];
   *p->pirl = robot->ir[0];
   *p->pirfl = robot->ir[1];
   *p->pirfm = robot->ir[2];
   *p->pirfr = robot->ir[3];
   *p->pirr = robot->ir[4];
   *p->podox = odo.pose.x;
   *p->podoy = odo.pose.y;
   *p->podoth = odo.pose.th;
   *p->pododist = odo.dist;
   *p->pododistleft = odo.distleft;
   *p->pododistright = odo.distright;
   *p->podovelocity = odo.vel;
   *p->pododencr = odo.dencr;
   *p->pododencl = odo.dencl;
   *p->podosteeringangle = odo.steeringangle;
   *p->pblacklinefound = line_found(&line_data);
   *p->pcrossingblack = check_crossing_black(&line_data);
   *p->pcrossingblackr = crossingblackliner;
   *p->pcrossingwhite = check_crossing_white(&line_data);
   *p->pbatteryvoltage = battery.vout;
   *p->psupplyvoltage = powersupply.vout;
   *p->pintpstatereturn = intpstatereturn;
   *p->line0 = ls_corrected[0];
   *p->line1 = ls_corrected[1];
   *p->line2 = ls_corrected[2];
   *p->line3 = ls_corrected[3];
   *p->line4 = ls_corrected[4];
   *p->line5 = ls_corrected[5];
   *p->line6 = ls_corrected[6];
   *p->line7 = ls_corrected[7];
   *p->plineraw0 = ls_input[0];
   *p->plineraw1 = ls_input[1];
   *p->plineraw2 = ls_input[2];
   *p->plineraw3 = ls_input[3];
   *p->plineraw4 = ls_input[4];
   *p->plineraw5 = ls_input[5];
   *p->plineraw6 = ls_input[6];
   *p->plineraw7 = ls_input[7];  
   *p->plinepos = motcon.linepos;
   *p->pnoline_b = line_data.noline_b;
   *p->pedgedetect = lineest.linedetect;
   *p->pedgex = lin.line.x;
   *p->pedgey = lin.line.y;
   *p->pedgeth = lin.line.th;
   *p->pnolinecamr = nolinecamr;
   *p->pnolinecaml = nolinecaml;
   *p->prdl = rdl;
   *p->prdr = rdr;
   *p->pguidemarkok = gmk.code;
   *p->pgmkx = gmk.x;
   *p->pgmky = gmk.y;
   *p->pgmkz = gmk.z;
   *p->pgmkomega = gmk.omega;
   *p->pgmkphi = gmk.phi;
   *p->pgmkkappa = gmk.kappa;
   *p->pwallestiswall = (double) wallest.is_wall;
   *p->pwallestholes = (double) wallest.holes;
   *p->pdlog0 = *motcon.irdistl;
   *p->pdlog1 = *motcon.irdistr;
   *p->pdlog2 = *motcon.wallanglel;
   *p->pdlog3 = *motcon.wallangler;
   *p->pwheretogo = wheretogo;
   *p->pmotorpwml = robot->left.pwm;
   *p->pmotorpwmr = robot->right.pwm;
   *p->pmotorcmdl = motcon.lvel;
   *p->pmotorcmdr = motcon.rvel;
   *p->pmotorstatusl = robot->left.status;
   *p->pmotorstatusr = robot->right.status;
   *p->pblocked = blocked;
   *p->pmotionstatus = motcon.status;
   *p->ptargetx = motcon.tgt.x;
   *p->ptargety = motcon.tgt.y;
   *p->ptargetth = motcon.tgt.th;
   *p->ptargetdist = motcon.target_dist;
   *p->ptime = smrgettime();
   *p->pgyro1 = gyro1;
   *p->pgyro2 = gyro2;
   *p->pgyrotemp1 = gyrotemp1;
   *p->pgyrotemp2 = gyrotemp2;
   *p->preadflags = robot->read_flags;
   *p->phakosteeringangle = hako.steeringAngle;
   *p->phakosteeringangleref = hako.steeringAngleRef;
   *p->phakospeedref = hako.speedRef;
   *p->phakocvtpulses = hako.cvtPulses;
   *p->phakoenginespeed = hako.engineSpeed;
   *p->phakoenginespeedref = hako.engineSpeedRef;
   *p->phakonavigationmode = hako.navigationMode;
   *p->phakonavigationmoderef = hako.navigationModeRef;
   *p->phakostate0 = hako.state[0];
   *p->phakostate1 = hako.state[1];
   *p->phakostate2 = hako.state[2];
   *p->phakostate3 = hako.state[3];
   *p->phakodirectionbyte = hako.directionByte;
   *p->phakoliftpos = hako.liftingGearPos;
   *p->phakotakeoffspeed = hako.powerTakeoffSpeed;
   *p->pimuroll = hako.xbow.roll;
   *p->pimupitch = hako.xbow.pitch;
   *p->pimuyaw = hako.xbow.yaw;
   *p->pimuaccx = hako.xbow.accX;
   *p->pimuaccy = hako.xbow.accY;
   *p->pimuaccz = hako.xbow.accZ;
   *p->pimutemp = hako.xbow.temp;
   *p->pimutime = hako.xbow.time;
   *p->pxkalman = vget(kalmanodo.kalman->Xpost, 0) + kalmanodo.offset_x;
   *p->pykalman = vget(kalmanodo.kalman->Xpost, 1) + kalmanodo.offset_y;
   *p->pthkalman = vget(kalmanodo.kalman->Xpost, 2);
   *p->pkalmanstatus = kalmanodo.status;
   *p->pgpseasting = hako.gps.easting;
   *p->pgpsnorthing = hako.gps.northing;
   *p->pgpsquality = hako.gps.quality;
   *p->pgpssatellites = hako.gps.satellites;
   *p->pgpsdop = hako.gps.dop;
   *p->vis0 = visionpar[0];
   *p->vis1 = visionpar[1];
   *p->vis2 = visionpar[2];
   *p->vis3 = visionpar[3];
   *p->vis4 = visionpar[4];
   *p->vis5 = visionpar[5];
   *p->vis6 = visionpar[6];
   *p->vis7 = visionpar[7];
   *p->vis8 = visionpar[8];
   *p->vis9 = visionpar[9];
   *p->l0=laserpar[0];
   *p->l1=laserpar[1];
   *p->l2=laserpar[2];
   *p->l3=laserpar[3];
   *p->l4=laserpar[4];
   *p->l5=laserpar[5];
   *p->l6=laserpar[6];
   *p->l7=laserpar[7];
   *p->l8=laserpar[8];
   *p->l9=laserpar[9];
   *p->pclock=robot->ts;
   *p->ptick=robot->tick;
}
