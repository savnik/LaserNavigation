#!/bin/bash
# laser scanner server
server imagepath="/rhome/demo/log2/laser"
server datapath="/rhome/demo/log2/laser"
server replayPath="/home/chr/replay/mmr20100409/log"
server port=24919
server serverlog
module load='var'
module load='imagepool'
# for uservermoduletester - not for ulmsserver
#module load='laserpool'
#module load=v360
#module load=odoPose (loaded at start)
#
#module load=utmPose
module load=mapPose
var mappose.estimateVel=true
mappose log
odopose log
#
scanset devtype='sick' devname="/dev/ttyUSB0"
scanset def=sick
; scanset devtype=replay devname="laser_0.log"
; scanset def=replay
scanset res=0.5
# set scanner position in robot coordinates
scanset x=0.43 y=0.0 z=0.43
scanset mirror=false
scanset logOpen
scanset log=5
#
# obstacle handling (groups fixed and dynamic obst)
module load="./ulmspassable.so.0"
var pass.minObstDist = 0.5;
var obst.outdoormode=0
var obst.obstGrpMaxDistance=1.0
var obst.obstGrpMaxTime=0.01
var obst.obstmerge=false
var obst.obstCogMerge=true
var obst.cogMergeLimit=2.0
var obst.singleMerge=true
var obst.singleLimit = 0.3
#
# display polygons m.v.
module load="./aupoly.so.0"
# mapped lines etc.
module load="./mapbase.so.0"
#
# load module to utilize mapped obstacles
module load="./aumapobst.so.0"
var mapobst.marginSolidFactor=0.3
var mapobst.marginFluffyFactor = 1.1
var mapobst.front=7
#
# laser based dynamic obstacles
module load="./aulobst.so.0"
var lobst.minSplitCnt=2
var lobst.splitDist=0.5
var lobst.maxLineIterations=25
var lobst.maxSamples=100
#
# localize based on lines and laserdata
module load="./aulocalize.so.0"
setInitCov cx=0.09 cy=0.09 cth=0.09
setInitPose x=13.0 y=6.1 th=-1.57
var localize.wheelBase=0.46
var localize.sdmRight=0.11
var localize.sdmLeft=0.11
#;
module load="./aurule.so.0"
rule step=0
# rule to load map into mapbase 
rule load="./bygn326.rule"
; rule load="./mapPose.rule"
rule log
rule resume
# processing of laserdata - into 360 degree scanner generation
scanpush i=7 cmd="v360 update"
# make obstacles 360 deg
v360push i=2 cmd="lobst make obst silent"
# localize about once a second
v360push i=10 cmd="localize silent=1"
# update fixed obstacles regularly
push t=10 cmd="obst getfrommap makeonly"
# load map lines into localizer
# mapobst map2localize - moved to bygn326.rule
# get mapped opstacles (converts fixed obstacles to odo-coordinates)
mapPosePush cmd="obst getFromMap makeonly"

